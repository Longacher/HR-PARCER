import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import time
import openpyxl
from openpyxl.styles import Font, Alignment
import os
import requests
from io import BytesIO
from config import EMAIL, PASSWORD, TELEGRAM_BOT_TOKEN
from whatsapp_driver import WhatsAppManager
from constants import ACCOUNTS_DIR
import pickle
from openpyxl import load_workbook
import io
from aiogram.types import FSInputFile, BufferedInputFile
from urllib.parse import quote
from openpyxl.drawing.image import Image
from excel_photo_replacer import replace_photo_urls_with_images
import shutil
import random

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

class Form(StatesGroup):
    waiting_confirmation = State()
    sending_in_progress = State()

user_data = {}

class ParserBot:
    def __init__(self):
        self.driver = None
        self.file_name = "candidates.xlsx"
        
    
    async def start_parser(self, chat_id, period):
        try:
            await bot.send_message(chat_id, "üîÑ –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            
            self.create_empty_excel()
            
            try:
                await asyncio.to_thread(self.run_parser, chat_id, period)
                await bot.send_message(chat_id, "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e:
                await bot.send_message(chat_id, f"‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã\n–û—à–∏–±–∫–∞: {str(e)}")
            
            shutil.copyfile(self.file_name, "input.xlsx")
            replace_photo_urls_with_images()
            shutil.copyfile("output.xlsx", self.file_name)
            with open(self.file_name, 'rb') as file:
                await bot.send_document(
                    chat_id=chat_id,
                    document=types.FSInputFile(self.file_name),
                )
            
            os.remove(self.file_name)

        except Exception as e:
            await bot.send_message(chat_id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"Error in parser: {str(e)}", exc_info=True)

    def create_empty_excel(self):
        workbook = openpyxl.Workbook()
        sheet = workbook.active
        sheet.append(["–§–ò–û", "–¢–µ–ª–µ—Ñ–æ–Ω", "–§–æ—Ç–æ (—Å—Å—ã–ª–∫–∞)"])
        header_font = Font(bold=True)
        for cell in sheet[1]:
            cell.font = header_font
            cell.alignment = Alignment(horizontal='center')
        sheet.column_dimensions['A'].width = 30
        sheet.column_dimensions['B'].width = 20
        sheet.column_dimensions['C'].width = 50
        
        workbook.save(self.file_name)

    def run_parser(self, chat_id, period):
        options = webdriver.FirefoxOptions()
        options.set_preference("dom.webdriver.enabled", False)
        options.set_preference("useAutomationExtension", False)
        options.add_argument("--disable-blink-features=AutomationControlled")
        # options.add_argument('--headless')

        self.driver = webdriver.Firefox(options=options)
        self.driver.set_window_size(1920, 1080)
        self.driver.get("https://hr-mnenie.com/")
        wait = WebDriverWait(self.driver, 10)
        time.sleep(2)
        
        try:
            cookie_btn = self.driver.find_element(By.XPATH, "//button[contains(., '–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ') or contains(., 'Accept')]")
            cookie_btn.click()
            time.sleep(1)
        except:
            pass
        
        login_attempts = 0
        while login_attempts < 3:
            try:
                login_btn = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(., '–í–æ–π—Ç–∏')]"))
                )
                ActionChains(self.driver).move_to_element(login_btn).pause(0.5).click().perform()
                self.driver.execute_script("arguments[0].click();", login_btn)
                login_btn.send_keys(Keys.RETURN)
                time.sleep(2)
                break
            except:
                login_attempts += 1
                self.driver.refresh()
                time.sleep(3)
        
        modal_loaded = False
        start_time = time.time()
        while time.time() - start_time < 15 and not modal_loaded:
            modal_loaded = self.driver.execute_script("""
                return !!document.querySelector('div.popup-center') && 
                    window.getComputedStyle(document.querySelector('div.popup-center')).display !== 'none';
            """)
            time.sleep(0.5)
        
        password_link = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, 
                "//a[contains(@class, 'popup-forget') and contains(., '–í–æ–π—Ç–∏ —Å –ø–∞—Ä–æ–ª–µ–º')]"))
        )
        password_link.click()
        time.sleep(1)
        
        if not modal_loaded:
            raise Exception("–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å")
        
        email_input = self.driver.execute_script("""
            var inputs = document.querySelectorAll('input.popup-elem__input');
            for (var i = 0; i < inputs.length; i++) {
                var style = window.getComputedStyle(inputs[i]);
                if (style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0') {
                    inputs[i].focus();
                    return inputs[i];
                }
            }
            return null;
        """)
        
        if not email_input:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–∏–º–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞")
        
        for attempt in range(3):
            try:
                email_input.clear()
                for char in EMAIL:
                    email_input.send_keys(char)
                    time.sleep(0.1)
                    current_value = email_input.get_attribute('value')
                    if not current_value.endswith(char):
                        email_input.send_keys(char)
                
                if email_input.get_attribute('value') == EMAIL:
                    break
            except:
                if attempt == 2:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ email")
                time.sleep(1)

        password_input = self.driver.execute_script("""
            var inputs = document.querySelectorAll('input.popup-elem__input[type="password"]');
            for (var i = 0; i < inputs.length; i++) {
                var style = window.getComputedStyle(inputs[i]);
                if (style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0') {
                    inputs[i].focus();
                    return inputs[i];
                }
            }
            return null;
        """)

        if not password_input:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–∏–º–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è")

        try:
            password_input.clear()
            time.sleep(0.5)
            for char in PASSWORD:
                password_input.send_keys(char)
                time.sleep(0.1)
            time.sleep(1)
        except Exception as e:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å: {str(e)}")
        
        password_input.send_keys(Keys.RETURN)
        time.sleep(1)

        personal_cabinet = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//a[@href='/profile' and contains(@class, 'header__btn')]"))
        )
        personal_cabinet.click()
        time.sleep(5)
        
        candidat_btn = self.driver.find_element(By.CSS_SELECTOR, ".side-bar__wrap img.side-bar__img[alt='UsersFour']")
        candidat_btn.click()
        time.sleep(5)
        
        tabs = self.driver.window_handles
        self.driver.switch_to.window(tabs[1])
        self.driver.switch_to.window(tabs[0])
        self.driver.close()
        self.driver.switch_to.window(tabs[1])
        time.sleep(1)
        
        more_candidat = WebDriverWait(self.driver, 15).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "a.big-filter"))
        )
        self.driver.execute_script("arguments[0].click();", more_candidat)

        try:
            age_inputs = WebDriverWait(self.driver, 15).until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".search-filter__input.age input")))
            
            for i, input_field in enumerate(age_inputs):
                self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", input_field)
                input_field.clear()
                input_field.send_keys("18" if i == 0 else "25")
            
            self.safe_click("//div[contains(@class, 'search-filter__checkbox')]//p[contains(text(), '–£–∫–∞–∑–∞–Ω –≤–æ–∑—Ä–∞—Å—Ç')]/..", 
                        by=By.XPATH)
            self.safe_click("//div[contains(@class, 'search-filter__checkbox')]//p[contains(text(), '–ñ–µ–Ω—Å–∫–∏–π')]/..", 
                        by=By.XPATH)
            if period == "month":
                self.safe_click("//div[contains(@class, 'search-filter__checkbox')]//p[contains(text(), '–ó–∞ –º–µ—Å—è—Ü')]/..", 
                            by=By.XPATH)
            elif period == "week":
                self.safe_click("//div[contains(@class, 'search-filter__checkbox')]//p[contains(text(), '–ó–∞ –Ω–µ–¥–µ–ª—é')]/..", 
                            by=By.XPATH)
            elif period == "day":
                self.safe_click("//div[contains(@class, 'search-filter__checkbox')]//p[contains(text(), '–ó–∞ —Å—É—Ç–∫–∏')]/..", 
                            by=By.XPATH)
            
            self.safe_click("button.search-filter__btn-submit")
            time.sleep(5)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {str(e)}", exc_info=True)
            raise
        
        try:
            workbook = openpyxl.load_workbook(self.file_name)
            sheet = workbook.active
            
            while True:
                resume_titles = self.driver.find_elements(By.XPATH, "//div[contains(@class, 'resume-data__title')]")
                for title in resume_titles:
                    self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", title)
                    time.sleep(1)

                    actions = ActionChains(self.driver)
                    actions.move_to_element(title).click().perform()

                    time.sleep(2)
                    tabs = self.driver.window_handles
                    self.driver.switch_to.window(tabs[-1])

                    try:
                        try:
                            show_contacts_btn = WebDriverWait(self.driver, 5).until(
                                EC.element_to_be_clickable((By.XPATH, "//a[contains(@class, 'result-item-main-info__btn') and contains(text(), '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã')]"))
                            )
                            show_contacts_btn.click()
                            time.sleep(2)
                        except TimeoutException:
                            logger.info("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        
                        full_name = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                        phone_number = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                        photo_url = "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                        
                        try:
                            full_name = WebDriverWait(self.driver, 5).until(
                                EC.presence_of_element_located((By.XPATH, "//h3[contains(@class, 'result-item-head__title')]"))
                            ).text.strip()
                        except TimeoutException:
                            pass
                        
                        try:
                            phone_element = WebDriverWait(self.driver, 5).until(
                                EC.presence_of_element_located((By.XPATH, "//a[contains(@class, 'result-item-main-contact__link') and contains(@href, 'tel:')]"))
                            )
                            phone_number = phone_element.text.strip()
                        except TimeoutException:
                            pass
                        
                        try:
                            photo_element = WebDriverWait(self.driver, 5).until(
                                EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'result-item-main-image')]//img"))
                            )
                            photo_url = photo_element.get_attribute("src").strip()
                            if not photo_url.startswith("http"):
                                photo_url = "https://hr-mnenie.com" + photo_url
                        except TimeoutException:
                            pass
                        sheet.append([full_name, phone_number, photo_url])
                        workbook.save(self.file_name)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∫–µ—Ç—ã: {e}", exc_info=True)
                    finally:
                        self.driver.close()
                        self.driver.switch_to.window(tabs[0])
                        time.sleep(10)
                
                try:
                    next_page_btn = self.driver.find_element(By.XPATH, "//a[contains(@class, 'result-page__btn_next')]")
                    self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", next_page_btn)
                    time.sleep(1)
                    next_page_btn.click()
                    time.sleep(5)
                except NoSuchElementException:
                    break
            
        finally:
            self.driver.quit()

    def safe_click(self, selector, by=By.CSS_SELECTOR, timeout=15):
        element = WebDriverWait(self.driver, timeout).until(
            EC.presence_of_element_located((by, selector)))
        self.driver.execute_script("arguments[0].scrollIntoView({block: 'center', inline: 'center'});", element)
        time.sleep(1)
        self.driver.execute_script("arguments[0].click();", element)
        return element

parser = ParserBot()

def get_whatsapp_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è WhatsApp"),
                KeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∏–∑ Excel")
            ],
            [
                KeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"),
                KeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é")
            ]
        ],
        resize_keyboard=True
    )

@dp.message(Command("wa_login"))
async def wa_login_command(message: types.Message):
    account = "default"
    try:
        session = WhatsAppManager.get_session(account)
        result = await asyncio.to_thread(session.open_browser_and_login)
        
        if "qr_code" in result:
            if len(result['qr_code']) < 1000:
                await message.answer("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π QR-–∫–æ–¥ (—Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä)")
                return
            
            bio = BytesIO(result['qr_code'])
            bio.seek(0)
            photo = BufferedInputFile(bio.read(), filename="qr_code.png")  
            
            await message.answer_photo(
                photo=photo,
                caption="–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WhatsApp\n(–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –°–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ‚Üí –°–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ)"
            )
        else:
            await message.answer(result.get("message", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"))
    except Exception as e:
        logger.error(f"Error in wa_login: {e}", exc_info=True)
        await message.answer(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("wa_send"))
async def wa_send_command(message: types.Message):
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /wa_send [–Ω–æ–º–µ—Ä/–Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞] [—Å–æ–æ–±—â–µ–Ω–∏–µ]\n–ü—Ä–∏–º–µ—Ä: /wa_send 79123456789 –ü—Ä–∏–≤–µ—Ç!")
        return
    
    target, msg_text = args[1], args[2]
    account = "default"
    
    try:
        session = WhatsAppManager.get_session(account)
        result = await asyncio.to_thread(session.send_message, target, msg_text)
        
        if "error" in result.get("status", ""):
            await message.answer(f"–û—à–∏–±–∫–∞: {result['message']}")
        else:
            await message.answer(result.get("message", "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"))
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}", exc_info=True)
        await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

@dp.message(Command("wa_updates"))
async def wa_updates_command(message: types.Message):
    account = "default"
    try:
        session = WhatsAppManager.get_session(account)
        new_msgs = await asyncio.to_thread(session.get_new_messages_unread)
        
        if not new_msgs:
            await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return
            
        for chat, msgs in new_msgs.items():
            text = f"üí¨ –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat}:\n"
            for msg in msgs:
                if msg["type"] == "text":
                    text += f"\nüë§ {msg['sender']}: {msg['message']}"
                elif msg["type"] == "image":
                    text += f"\nüì∑ {msg['sender']} –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                elif msg["type"] == "audio":
                    text += f"\nüéµ {msg['sender']} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                elif msg["type"] == "file":
                    text += f"\nüìÅ {msg['sender']} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª: {msg.get('file_name', '')}"
            
            for i in range(0, len(text), 4000):
                await message.answer(text[i:i+4000])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}", exc_info=True)
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

@dp.message(Command("wa_close"))
async def wa_close_command(message: types.Message):
    account = "default"
    try:
        result = await asyncio.to_thread(WhatsAppManager.close_session, account)
        await message.answer(result.get("message", "–°–µ—Å—Å–∏—è WhatsApp –∑–∞–∫—Ä—ã—Ç–∞"))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}", exc_info=True)
        await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")

@dp.message(F.text == "üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è WhatsApp")
async def wa_login_button(message: types.Message):
    await wa_login_command(message)

@dp.message(F.text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
async def wa_updates_button(message: types.Message):
    await wa_updates_command(message)

@dp.message(F.text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é")
async def wa_close_button(message: types.Message):
    await wa_close_command(message)

@dp.message(F.text == "üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∏–∑ Excel")
async def request_excel_file(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–§–æ—Ä–º–∞—Ç:\n"
        "- –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü: –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (79123456789)\n"
        "- –í—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "- –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è (–∑–∞–≥–æ–ª–æ–≤–∫–∏)",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(F.document)
async def handle_excel_file(message: types.Message, state: FSMContext):
    if not message.document.file_name.endswith(('.xlsx', '.xls')):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx)")
        return

    try:
        file_info = await bot.get_file(message.document.file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        
        wb = load_workbook(io.BytesIO(downloaded_file.read()))
        sheet = wb.active
        
        phones = []
        messages = []
        delays = []
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[0] and row[1]: 
                phone = str(row[0]).strip()
                message_text = str(row[1]).strip()
                
                delay = None
                if len(row) > 2 and row[2] is not None:
                    try:
                        delay = float(row[2])
                        if delay < 0:
                            delay = None
                    except (ValueError, TypeError):
                        pass
                
                if delay is None:
                    delay = random.uniform(120, 180)
                
                phones.append(phone)
                messages.append(message_text)
                delays.append(delay)

        if not phones:
            await message.answer("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=get_whatsapp_keyboard())
            return

        await state.update_data({
            'phones': phones,
            'messages': messages,
            'delays': delays,
            'success_count': 0,
            'fail_count': 0
        })

        confirm_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")]
            ],
            resize_keyboard=True
        )

        await message.answer(
            f"–ù–∞–π–¥–µ–Ω–æ {len(phones)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π. –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {min(delays):.1f} —Å–µ–∫\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {max(delays):.1f} —Å–µ–∫",
            reply_markup=confirm_keyboard
        )
        
        await state.set_state(Form.waiting_confirmation)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}", exc_info=True)
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@dp.message(F.text == "‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", Form.waiting_confirmation)
async def confirm_sending(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Form.sending_in_progress)

    try:
        session = WhatsAppManager.get_session("default")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ WhatsApp: {str(e)}", reply_markup=get_whatsapp_keyboard())
        await state.clear()
        return

    phones = data['phones']
    messages = data['messages']
    delays = data['delays']

    for i, (phone, message_text, delay) in enumerate(zip(phones, messages, delays), 1):
        try:
            if not phone.isdigit() or len(phone) < 10:
                data['fail_count'] += 1
                logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: {phone}")
                continue
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            result = await asyncio.to_thread(session.send_message, phone, message_text)
            
            if result.get("status") == "success":
                data['success_count'] += 1
            else:
                data['fail_count'] += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {phone}: {result.get('message')}")
                
        except Exception as e:
            data['fail_count'] += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}", exc_info=True)
        if i % 5 == 0 or i == len(phones):
            progress = (
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(phones)}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {data['success_count']}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {data['fail_count']}\n"
                f"‚è± –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {delay:.1f} —Å–µ–∫"
            )
            await message.answer(progress)
            await state.update_data(data)
        
        if i < len(phones):
            await asyncio.sleep(delay)

    report = (
        f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–í—Å–µ–≥–æ: {len(phones)}\n"
        f"–£—Å–ø–µ—à–Ω–æ: {data['success_count']}\n"
        f"–û—à–∏–±–æ–∫: {data['fail_count']}"
    )
    
    await message.answer(report, reply_markup=get_whatsapp_keyboard())
    await state.clear()

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", Form.waiting_confirmation)
async def cancel_sending(message: types.Message, state: FSMContext):
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_whatsapp_keyboard())
    await state.clear()

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ó–∞ –º–µ—Å—è—Ü"),
                KeyboardButton(text="–ó–∞ –Ω–µ–¥–µ–ª—é"),
                KeyboardButton(text="–ó–∞ —Å—É—Ç–∫–∏")
            ],
            [
                KeyboardButton(text="üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è WhatsApp"),
                KeyboardButton(text="üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∏–∑ Excel")
            ],
            [
                KeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å WhatsApp"),
                KeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å WhatsApp")
            ]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "üîπ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∏ *–ó–∞ –º–µ—Å—è—Ü/–Ω–µ–¥–µ–ª—é/—Å—É—Ç–∫–∏* - –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∏ *WhatsApp* - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–º",
        reply_markup=keyboard,parse_mode="Markdown"
    )

@dp.message(F.text.in_(["–ó–∞ –º–µ—Å—è—Ü", "–ó–∞ –Ω–µ–¥–µ–ª—é", "–ó–∞ —Å—É—Ç–∫–∏"]))
async def process_period(message: types.Message):
    period_map = {
        "–ó–∞ –º–µ—Å—è—Ü": "month",
        "–ó–∞ –Ω–µ–¥–µ–ª—é": "week",
        "–ó–∞ —Å—É—Ç–∫–∏": "day"
    }
    period = period_map.get(message.text)
    if period:
        await message.answer(
            f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: {message.text}. –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä...",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await parser.start_parser(message.from_user.id, period)

async def main():
    os.makedirs(ACCOUNTS_DIR, exist_ok=True)
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
